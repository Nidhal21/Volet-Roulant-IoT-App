// Mocks generated by Mockito 5.4.6 from annotations
// in volet_roulant_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes, override_on_non_overriding_member
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:volet_roulant_app/providers/app_state.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AppState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppState extends _i1.Mock implements _i2.AppState {
  MockAppState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isWindowOpen => (super.noSuchMethod(
        Invocation.getter(#isWindowOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get gasDetected => (super.noSuchMethod(
        Invocation.getter(#gasDetected),
        returnValue: false,
      ) as bool);

  @override
  bool get rainDetected => (super.noSuchMethod(
        Invocation.getter(#rainDetected),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.Schedule> get schedules => (super.noSuchMethod(
        Invocation.getter(#schedules),
        returnValue: <_i2.Schedule>[],
      ) as List<_i2.Schedule>);

  @override
  List<_i2.SmokeEvent> get smokeEvents => (super.noSuchMethod(
        Invocation.getter(#smokeEvents),
        returnValue: <_i2.SmokeEvent>[],
      ) as List<_i2.SmokeEvent>);

  @override
  String get city => (super.noSuchMethod(
        Invocation.getter(#city),
        returnValue: '',
      ) as String);

  @override
  _i2.WeatherData? get weatherData => (super.noSuchMethod(
        Invocation.getter(#weatherData),
        returnValue: null,
      ) as _i2.WeatherData?);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> fetchWeather() => (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void toggleWindow() => super.noSuchMethod(
        Invocation.method(
          #toggleWindow,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> addSchedule(
    String? time,
    String? action,
    String? day,
  ) => (super.noSuchMethod(
        Invocation.method(
          #addSchedule,
          [
            time,
            action,
            day,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeSchedule(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeSchedule,
          [index],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCity(String? newCity) => (super.noSuchMethod(
        Invocation.method(
          #setCity,
          [newCity],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}